---
- name: Configure Docker Network and Containers
  hosts: webservers
  become: yes
  tasks:

    - name: Terminate all running containers
      shell: docker rm -f $(docker ps -aq)
      ignore_errors: yes
      changed_when: False
      
    - name: Delete Docker network if it exists
      command: docker network rm my_network
      ignore_errors: yes
      register: network_removal_result
      changed_when: network_removal_result.rc == 0

    - name: Create Docker network with specific subnet
      command: docker network create --subnet=172.18.0.0/16 my_network
      register: network_creation_result
      changed_when: "'already exists' not in network_creation_result.stderr"

    - name: Run nginx container with specific IP
      docker_container:
        name: web_server
        image: nginx
        state: started
        networks:
          - name: my_network
            ipv4_address: 172.18.0.2
        env:
          MYSQL_ROOT_PASSWORD: example

    - name: Run MySQL container with specific IP
      docker_container:
        name: db_server
        image: mysql
        state: started
        networks:
          - name: my_network
            ipv4_address: 172.18.0.3
        env:
          MYSQL_ROOT_PASSWORD: example

    - name: Show all running containers before termination
      command: docker ps --format "{{'{{'}}.Names{{'}}'}}"
      register: all_containers_before

    - name: Debug all running containers before termination
      debug:
        msg: "All running containers before termination: {{ all_containers_before.stdout_lines }}"

    - name: Terminate all running containers
      shell: docker rm -f $(docker ps -aq)
      ignore_errors: yes
      changed_when: False

    - name: Show all running containers after termination
      command: docker ps --format "{{'{{'}}.Names{{'}}'}}"
      register: all_containers_after

    - name: Debug all running containers after termination
      debug:
        msg: "All running containers after termination: {{ all_containers_after.stdout_lines }}"